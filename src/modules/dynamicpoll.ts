import util = require('../utilites');
import * as types from '../index';
import Discord = require('discord.js');

class DynamicPoll implements types.ICommandModule {
    name = 'dynamicpoll';
    description = '–ù–µ–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ';
    cooldown = 0;
    aliases = ['poll', '–û–ø—Ä–æ—Å'];
    usage = '[–í—Ä–µ–º—è] [ID —Å–æ–æ–±—â–µ–Ω–∏—è]';
    args = 2;
    permlevel = 0;

    init(client) {
        client.polls = [];
    }

    async execute(message: Discord.Message, args: string[]): Promise < string > {
        global.logger.info(message.content);
        const client: types.AClient = message.client as types.AClient;

        const timeout: number = Number(args.shift());
        const msgid: string = args.shift();

        const msg: Discord.Message = await message.channel.messages.fetch(msgid);

        if (msg) {
            // let msg = await message.channel.send(`–û—Ç–∫—Ä—ã—Ç–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ! –í—Ä–µ–º–µ–Ω–∏ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è: ${timeout} –º–∏–Ω—É—Ç—ã. –í–∞—Ä–∏–∞–Ω—Ç—ã: `);
            await message.channel.send(`–û—Ç–∫—Ä—ã—Ç–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ! –í—Ä–µ–º–µ–Ω–∏ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è: ${util.pluralizeRu(timeout, ["–º–∏–Ω—É—Ç–∞", "–º–∏–Ω—É—Ç—ã", "–º–∏–Ω—É—Ç"])}. –ù–æ–º–µ—Ä –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: ${client.polls.length+1}`);

            const emojies: string[] = args;
            const reactions: Discord.MessageReaction[] = [];
            for (let i = 0; i < emojies.length; i++) {
                await msg.react(emojies[i]);
            }
            // Filters
            const filter = (reaction: Discord.MessageReaction, user: Discord.User) => {
                if (user.bot) return false;
                return emojies.includes(reaction.emoji.name);
            }

            const filterInvalid = (reaction: Discord.MessageReaction, user: Discord.User) => {
                for (let i = 0; i < reactions.length; i++) {
                    const react = reactions[i];
                    if (react != undefined && react.emoji.name != reaction.emoji.name) {
                        if (react.users.cache.get(user.id) != undefined) {
                            return true;
                        }
                    }
                }
                return !emojies.includes(reaction.emoji.name);
            }
            // const filterDown = (reaction, user) => reaction.emoji.name === 'üëé' && user.id === message.author.id;

            const collector = msg.createReactionCollector(filter);

            const invalid = msg.createReactionCollector(filterInvalid);

            client.polls.push(collector);

            invalid.on('collect', (reaction: Discord.MessageReaction, user: Discord.User) => {
                if (!user.bot) reaction.users.remove(user);
            })

            collector.on('collect', (reaction: Discord.MessageReaction) => {
                const name = reaction.emoji.name;
                for (let i = 0; i < emojies.length; i++) {
                    if (name == emojies[i]) {
                        reactions[i] = reaction;
                    }
                }
            })

            collector.on('end', (reaction: Discord.MessageReaction, reason: string) => {
                invalid.stop('');
                if (reason == 'timeout') message.channel.send('–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–∫–æ–Ω—á–µ–Ω–æ!');
                message.channel.send('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã');
                for (let i = 0; i < emojies.length; i++) {
                    message.channel.send(`${emojies[i]} - ${reactions[i] != undefined ? reactions[i].count-1 : 0} –≥–æ–ª–æ—Å–æ–≤.`);
                }
            })

            setTimeout(() => {
                collector.stop('timeout');
            }, 60000 * timeout)


            return "success";
        }
        else {
            message.channel.send(`–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!`);
            return "error";
        }
    }
};
export = new DynamicPoll();